### Eclipse Workspace Patch 1.0
#P AnnuaireInfoSVN
Index: src/fr/afcepf/ai78/projet1/objets/Stagiaire.java
===================================================================
--- src/fr/afcepf/ai78/projet1/objets/Stagiaire.java	(revision 17)
+++ src/fr/afcepf/ai78/projet1/objets/Stagiaire.java	(working copy)
@@ -10,10 +10,17 @@
 	
 	
 	public Stagiaire() {
+	}
 
+	public Stagiaire(String nom, String prenom, String departement,
+			String promotion, int annee) {
+		this.nom = nom;
+		this.prenom = prenom;
+		this.departement = departement;
+		this.promotion = promotion;
+		this.annee = annee;
 	}
 
-
 	@Override
 	public String toString() {
 		return "Stagiaire [nom=" + nom + ", prenom=" + prenom
@@ -54,20 +61,9 @@
 			return false;
 		return true;
 	}
-
-
-	public Stagiaire(String nom, String prenom, String departement,
-			String promotion, int annee) {
-		this.nom = nom;
-		this.prenom = prenom;
-		this.departement = departement;
-		this.promotion = promotion;
-		this.annee = annee;
-	}
-
+	
 	public int compareTo(Stagiaire unStagiaire){
 		
-		//System.out.println("dans constructeur: "+unStagiaire);
 		if(this.nom.trim().compareToIgnoreCase(unStagiaire.getNom().trim())<0){
 			return -1;
 		}else if(this.nom.trim().compareToIgnoreCase(unStagiaire.getNom().trim())>0){
@@ -143,7 +139,4 @@
 		this.annee = annee;
 	}
 	
-	
-	
-
 }
Index: src/fr/afcepf/ai78/projet1/fileManager/GestionBinaire.java
===================================================================
--- src/fr/afcepf/ai78/projet1/fileManager/GestionBinaire.java	(revision 17)
+++ src/fr/afcepf/ai78/projet1/fileManager/GestionBinaire.java	(working copy)
@@ -7,7 +7,6 @@
 import java.io.RandomAccessFile;
 import java.util.ArrayList;
 import java.util.List;
-
 import fr.afcepf.ai78.projet1.constante.AnnuaireConstante;
 import fr.afcepf.ai78.projet1.objets.Noeud;
 import fr.afcepf.ai78.projet1.objets.Stagiaire;
@@ -16,59 +15,17 @@
 
 	
 	private RandomAccessFile fichier ;
+	private List<Integer> fantome = new ArrayList<Integer>();
 	
-
-	private String formater (int taille ,String chaine){
-		
-		for (int i = chaine.length(); i < taille/2; i++) {
-			
-			chaine = chaine+ " ";
-		}
-		return chaine;
-	} 
-
-	private String lireChaine(int taille){
-		
-		String chaine="";
-		
-		try {
-			byte [] tableauOctet = new byte [taille];
-			fichier.read(tableauOctet);
-			chaine = new String(tableauOctet,"UTF-16").trim();
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return chaine;
+	public GestionBinaire(){
 	}
 	
-	public List<Noeud> lireFichier(){
-		List<Noeud> liste = new ArrayList<Noeud>();
-		try {
-			for (int i = 0; i < fichier.length()/AnnuaireConstante.TAILLE_NOEUD; i++) {
-				liste.add(lireNoeud(i));
-			}
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-		return liste;
+	public GestionBinaire(String fichierSource, String FichierSortie) {
+		creationArbreBinaire(fichierSource, FichierSortie);
 	}
-
 	
-	private void ecrireInt(int position, int element){
-		
+	public boolean creationArbreBinaire(String fichierSource, String FichierSortie) {
 		try {
-			fichier.seek(position);
-			fichier.writeInt(element);
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		
-	}
-	public GestionBinaire(String fichierSource, String FichierSortie) {
-		
-		try {
 			FileReader fr = new FileReader(fichierSource);
 			BufferedReader br  = new BufferedReader(fr);
 			fichier = new RandomAccessFile(FichierSortie, "rw");
@@ -76,161 +33,98 @@
 			String ligne = "";
 			int indiceTableau = 0;
 			String []elements = new String [5];
+			
 			while((ligne=br.readLine())!=null){
 				
 				if(!ligne.equals("*")){
-					
 					elements[indiceTableau] = ligne;
 					indiceTableau++;
 					
 				}else{
-					
-					boolean unBoolean = false;
 					Noeud unNoeud = new Noeud(elements[0], elements[1], elements[2], elements[3], Integer.parseInt(elements[4]));
 					indiceTableau = 0;
-					//System.out.println("Ajout arbre");
-					boolean doublon = ajoutElementArbreBinaire(unNoeud,-1,0,unBoolean);
 					
-					if(!doublon){
-						//System.out.println("ecriture");
+					if(!ajoutElementArbreBinaire(unNoeud,-1,0,false)){
 						fichier.seek(fichier.length());
 						ecrireNoeud(unNoeud);
-					}			
-				}		
+					}
+				}
 			}
 			
-			
+			return true;
 		} catch (FileNotFoundException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			//e.printStackTrace();
+			return false;
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}	
-	}
-	
-	public Noeud lireNoeud(int indice) {
-		
-		Noeud unNoeud = new Noeud();
-		try {
-			
-			fichier.seek(indice*AnnuaireConstante.TAILLE_NOEUD);
-
-			unNoeud.setNom(lireChaine(AnnuaireConstante.TAILLE_NOM));
-			unNoeud.setPrenom(lireChaine(AnnuaireConstante.TAILLE_PRENOM));
-			unNoeud.setPromotion(lireChaine(AnnuaireConstante.TAILLE_PROMOTION));
-			unNoeud.setDepartement(lireChaine(AnnuaireConstante.TAILLE_DEPARTEMENT));
-			unNoeud.setAnnee(fichier.readInt());
-			unNoeud.setParent(fichier.readInt());
-			unNoeud.setFilsG(fichier.readInt());
-			unNoeud.setFilsD(fichier.readInt());
-
-			
-		} catch (IOException e) {
 			//e.printStackTrace();
-			return null;
+			return false;
 		}
-
-		return unNoeud;
 	}
 	
-	public void ecrireNoeud(int indice, Noeud ajout) {
-		
-		try {
-			fichier.seek(indice*AnnuaireConstante.TAILLE_NOEUD);
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_NOM,ajout.getNom()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_PRENOM,ajout.getPrenom()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_PROMOTION,ajout.getPromotion()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_DEPARTEMENT,ajout.getDepartement()));
-			fichier.writeInt(ajout.getAnnee());
-			fichier.writeInt(ajout.getParent());
-			fichier.writeInt(ajout.getFilsG());
-			fichier.writeInt(ajout.getFilsD());
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-	}
-	public void ecrireNoeud(Noeud ajout) {
-		
-		try {
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_NOM,ajout.getNom()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_PRENOM,ajout.getPrenom()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_PROMOTION,ajout.getPromotion()));
-			fichier.writeChars(formater(AnnuaireConstante.TAILLE_DEPARTEMENT,ajout.getDepartement()));
-			fichier.writeInt(ajout.getAnnee());
-			fichier.writeInt(ajout.getParent());
-			fichier.writeInt(ajout.getFilsG());
-			fichier.writeInt(ajout.getFilsD());
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-	}
-	
-	private boolean ajoutElementArbreBinaire(Noeud stagiaire, int posParent, int posArbre, Boolean existeDeja) throws IOException {
-
-		//System.out.println("###############################");
-		Noeud parent = lireNoeud(posParent);
-		Noeud arbre = lireNoeud(posArbre);
-//		System.out.println("Stagiaire: "+stagiaire);
-//		System.out.println("Parent: "+parent);
-//		System.out.println("Arbre: "+arbre);
-		if(arbre == null){
-			stagiaire.setParent(posParent);
-			existeDeja = false;
+	public boolean ajoutElementArbreBinaire(Noeud stagiaire, int posParent, int posArbre, Boolean existeDeja) {
+		try{
+			Noeud parent = lireNoeud(posParent);
+			Noeud arbre = lireNoeud(posArbre);
 			
-			if(parent != null){
-				if(parent.compareTo(stagiaire)<0){
-					ecrireInt((stagiaire.getParent()*AnnuaireConstante.TAILLE_NOEUD)+AnnuaireConstante.TAILLE_STAGIAIRE+AnnuaireConstante.TAILLE_PARENT+AnnuaireConstante.TAILLE_FILSG,(int)(fichier.length()/AnnuaireConstante.TAILLE_NOEUD));
-					//System.out.println("Droite :"+lireNoeud(posParent));
-
-				}else{
-
-					ecrireInt((stagiaire.getParent()*AnnuaireConstante.TAILLE_NOEUD)+AnnuaireConstante.TAILLE_STAGIAIRE+AnnuaireConstante.TAILLE_PARENT,(int)(fichier.length()/AnnuaireConstante.TAILLE_NOEUD)); 
-					//System.out.println("Gauche :"+lireNoeud(posParent));
+			if(arbre == null){
+				stagiaire.setParent(posParent);
+				existeDeja = false;
+				
+				if(parent != null){
+					if(parent.compareTo(stagiaire)<0){
+						ecrireInt((stagiaire.getParent()*AnnuaireConstante.TAILLE_NOEUD)+AnnuaireConstante.TAILLE_STAGIAIRE+AnnuaireConstante.TAILLE_PARENT+AnnuaireConstante.TAILLE_FILSG,(int)(fichier.length()/AnnuaireConstante.TAILLE_NOEUD));
+	
+					}else{
+						ecrireInt((stagiaire.getParent()*AnnuaireConstante.TAILLE_NOEUD)+AnnuaireConstante.TAILLE_STAGIAIRE+AnnuaireConstante.TAILLE_PARENT,(int)(fichier.length()/AnnuaireConstante.TAILLE_NOEUD));
+						
+					}
 				}
-			}
-			
-		}else{
-			//System.out.println(stagiaire.compareTo(arbre));
-			if(stagiaire.compareTo(arbre)<0){
-				return ajoutElementArbreBinaire(stagiaire, posArbre, arbre.getFilsG(), existeDeja);
 				
 			}else{
-				if(stagiaire.compareTo(arbre)>0){
-					return ajoutElementArbreBinaire(stagiaire, posArbre, arbre.getFilsD(), existeDeja);
+				if(stagiaire.compareTo(arbre)<0){
+					return ajoutElementArbreBinaire(stagiaire, posArbre, arbre.getFilsG(), existeDeja);
+					
 				}else{
-					//System.out.println("boolean");
-					return true;
+					if(stagiaire.compareTo(arbre)>0){
+						return ajoutElementArbreBinaire(stagiaire, posArbre, arbre.getFilsD(), existeDeja);
+					}else{
+						return true;
+					}
 				}
 			}
+			return existeDeja;
+			
+		}catch (FileNotFoundException e) {
+			//e.printStackTrace();
+			return false;
+		} catch (IOException e) {
+			//e.printStackTrace();
+			return false;
 		}
-		return existeDeja;
 	}
 	
 	public List<Stagiaire> afficherTout(int posArbre, boolean gauche, boolean droite, List<Stagiaire> listeNoeud)
 	{
 		Noeud arbre = lireNoeud(posArbre);
 		if(gauche && arbre.hasFilsG()){
-			
 			afficherTout(arbre.getFilsG(),true,true,listeNoeud);
+			
 		}else{
 			if(gauche || droite){
 				listeNoeud.add(arbre);
 			}
 			
-			
 			if(droite && arbre.hasFilsD()){
 				afficherTout(arbre.getFilsD(),true,true,listeNoeud);
+				
 			}else if(!arbre.isRacine()){
 				Noeud parent = lireNoeud(arbre.getParent());
+				
 				if(parent.getFilsG() == posArbre){
 					afficherTout(arbre.getParent(),false,true,listeNoeud);
 				}else{
 					afficherTout(arbre.getParent(),false,false,listeNoeud);
 				}
-				
 			}
 		}
 		return listeNoeud;
@@ -239,14 +133,17 @@
 	
 	public List<Stagiaire> rechercher(String nom, int posArbre , List<Stagiaire> liste){
 		Noeud arbre = lireNoeud(posArbre);
+		
 		if (arbre == null) {
 			return liste ;
 		} else {
 			if (nom.compareTo(arbre.getNom().trim()) < 0 ) {
 				liste = rechercher(nom , arbre.getFilsG() , liste);
+				
 			} else {
 				if (nom.compareTo(arbre.getNom().trim()) > 0 ) {
 					liste = rechercher(nom , arbre.getFilsD() , liste);
+					
 				} else {
 					liste.add(arbre);
 					liste = rechercher ( nom , arbre.getFilsG() , liste);
@@ -291,4 +188,90 @@
 //		}
 //	}
 	
+	public List<Noeud> lireFichier(){
+		List<Noeud> liste = new ArrayList<Noeud>();
+		try {
+			for (int i = 0; i < fichier.length()/AnnuaireConstante.TAILLE_NOEUD; i++) {
+				liste.add(lireNoeud(i));
+			}
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return liste;
+	}
+	
+	private void ecrireNoeud(int indice, Noeud ajout) throws IOException {
+		fichier.seek(indice*AnnuaireConstante.TAILLE_NOEUD);
+		
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_NOM,ajout.getNom()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_PRENOM,ajout.getPrenom()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_PROMOTION,ajout.getPromotion()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_DEPARTEMENT,ajout.getDepartement()));
+		fichier.writeInt(ajout.getAnnee());
+		fichier.writeInt(ajout.getParent());
+		fichier.writeInt(ajout.getFilsG());
+		fichier.writeInt(ajout.getFilsD());
+	}
+	
+	private void ecrireNoeud(Noeud ajout) throws IOException {
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_NOM,ajout.getNom()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_PRENOM,ajout.getPrenom()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_PROMOTION,ajout.getPromotion()));
+		fichier.writeChars(formater(AnnuaireConstante.TAILLE_DEPARTEMENT,ajout.getDepartement()));
+		fichier.writeInt(ajout.getAnnee());
+		fichier.writeInt(ajout.getParent());
+		fichier.writeInt(ajout.getFilsG());
+		fichier.writeInt(ajout.getFilsD());
+	}
+	
+	private Noeud lireNoeud(int indice) {
+		
+		Noeud unNoeud = new Noeud();
+		try {
+			
+			fichier.seek(indice*AnnuaireConstante.TAILLE_NOEUD);
+
+			unNoeud.setNom(lireChaine(AnnuaireConstante.TAILLE_NOM));
+			unNoeud.setPrenom(lireChaine(AnnuaireConstante.TAILLE_PRENOM));
+			unNoeud.setPromotion(lireChaine(AnnuaireConstante.TAILLE_PROMOTION));
+			unNoeud.setDepartement(lireChaine(AnnuaireConstante.TAILLE_DEPARTEMENT));
+			unNoeud.setAnnee(fichier.readInt());
+			unNoeud.setParent(fichier.readInt());
+			unNoeud.setFilsG(fichier.readInt());
+			unNoeud.setFilsD(fichier.readInt());
+			
+		} catch (IOException e) {
+			return null;
+		}
+		return unNoeud;
+	}
+	
+	private void ecrireInt(int position, int element) throws IOException{
+		fichier.seek(position);
+		fichier.writeInt(element);
+	}
+	
+	private String formater (int taille ,String chaine){
+		
+		for (int i = chaine.length(); i < taille/2; i++) {
+			
+			chaine = chaine+ " ";
+		}
+		return chaine;
+	} 
+
+	private String lireChaine(int taille){
+		
+		String chaine="";
+		
+		try {
+			byte [] tableauOctet = new byte [taille];
+			fichier.read(tableauOctet);
+			chaine = new String(tableauOctet,"UTF-16").trim();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return chaine;
+	}
+	
 }
Index: src/fr/afcepf/ai78/projet1/objets/Annuaire.java
===================================================================
--- src/fr/afcepf/ai78/projet1/objets/Annuaire.java	(revision 17)
+++ src/fr/afcepf/ai78/projet1/objets/Annuaire.java	(working copy)
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import fr.afcepf.ai78.projet1.fileManager.GestionBinaire;
 
 public class Annuaire {
Index: src/fr/afcepf/ai78/projet1/objets/Noeud.java
===================================================================
--- src/fr/afcepf/ai78/projet1/objets/Noeud.java	(revision 10)
+++ src/fr/afcepf/ai78/projet1/objets/Noeud.java	(working copy)
@@ -1,68 +1,63 @@
 package fr.afcepf.ai78.projet1.objets;
 
-public class Noeud {
+public class Noeud extends Stagiaire{
 	
-	private static int nbStagiaire = 0; 
-	private Stagiaire donnee;
-	private Noeud parent = null;
-	private Noeud filsG = null;
-	private Noeud filsD = null;
-	private int position =0;
-	
-	
-	
-	public Noeud(Stagiaire donnee) {
-		this.donnee = donnee;
+	private int posParent = -1;
+	private int posFilsG = -1;
+	private int posFilsD = -1;
+
+	public Noeud() {
+		super();
+	}
+
+	public Noeud(String nom, String prenom, String departement,
+			String promotion, int annee) {
+		super(nom, prenom, departement, promotion, annee);
 		
 	}
-	
-	
 
-	public void setPosition() {
-		this.position = nbStagiaire++;
+	public boolean isRacine(){
+		return (posParent==-1);
 	}
 
 
-
 	public boolean hasFilsG() {
-		return !(filsG==null);
+		return !(posFilsG==-1);
 	}
+	
 	public boolean hasFilsD() {
 
-		return !(filsD==null);
+		return !(posFilsD==-1);
 	}
-	public Stagiaire getDonnee() {
-		return donnee;
-	}
 
-	public Noeud getParent() {
-		return parent;
+	public int getParent() {
+		return posParent;
 	}
 
-	public Noeud getFilsG() {
-		return filsG;
+	public int getFilsG() {
+		return posFilsG;
 	}
 
-	public Noeud getFilsD() {
-		return filsD;
+	public int getFilsD() {
+		return posFilsD;
 	}
-	public void setParent(Noeud parent) {
-		this.parent = parent;
+	
+	public void setParent(int parent) {
+		this.posParent = parent;
 	}
-	public void setFilsG(Noeud filsG) {
-		this.filsG = filsG;
+	
+	public void setFilsG(int filsG) {
+		this.posFilsG = filsG;
 	}
-	public void setFilsD(Noeud filsD) {
-		this.filsD = filsD;
+	
+	public void setFilsD(int filsD) {
+		this.posFilsD = filsD;
 	}
 
-	public int getPosition() {
-		return position;
+	@Override
+	public String toString() {
+		return "Noeud [Nom="+nom+" posParent=" + posParent + ", posFilsG=" + posFilsG
+				+ ", posFilsD=" + posFilsD + "]";
 	}
 
-	
-
-	
-	
-
 }
